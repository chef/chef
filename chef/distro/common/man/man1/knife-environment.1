.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "KNIFE\-ENVIRONMENT" "1" "September 2012" "Chef 11.0.0.alpha" "Chef Manual"
.
.SH "NAME"
\fBknife\-environment\fR \- Define cookbook policies for the environments in your infrastructure
.
.SH "SYNOPSIS"
\fBknife\fR \fBenvironment\fR \fIsub\-command\fR \fI(options)\fR
.
.SH "SUBCOMMANDS"
Environment subcommands follow a basic create, read, update, delete (CRUD) pattern\. The following subcommands are available:
.
.SH "CREATE"
\fBknife environment create\fR \fIenvironment\fR \fI(options)\fR
.
.TP
\fB\-d\fR, \fB\-\-description DESCRIPTION\fR
The value of the description field\.
.
.P
Create a new environment object on the Chef Server\. The envrionment will be opened in the text editor for editing prior to creation if the \-n option is not present\.
.
.SH "DELETE"
\fBknife environment delete\fR \fIenvironment\fR \fI(options)\fR
.
.P
Destroy an environment on the Chef Server\. A prompt for confirmation will be displayed if the \-y options is not given\.
.
.SH "EDIT"
\fBknife environment edit\fR \fIenvironment\fR \fI(options)\fR
.
.P
Fetch \fIenvironment\fR and display it in the text editor for editing\. The environment will be saved to the Chef Server when the editing session exits\.
.
.SH "FROM FILE"
\fBknife environment from file\fR \fIfile\fR \fI(options)\fR
.
.P
Create or update an environment from the JSON or Ruby format \fIfile\fR\. See \fBformat\fR for the proper format of this file\.
.
.SH "LIST"
\fBknife environment list\fR \fI(options)\fR * \fB\-w\fR, \fB\-\-with\-uri\fR:
.
.IP "" 4
.
.nf

Show the resource URI for each environment
.
.fi
.
.IP "" 0
.
.SH "SHOW"
\fBknife environment show\fR \fIenvironment\fR \fI(options)\fR
.
.SH "DESCRIPTION"
Environments provide a means to apply policies to hosts in your infrastructure based on business function\. For example, you may have a separate copy of your infrastructure called "dev" that runs the latest version of your application and should use the newest versions of your cookbooks when configuring systems, and a production instance of your infrastructure where you wish to update code and cookbooks in a more controlled fashion\. In Chef, this function is implemented with \fIenvironments\fR\.
.
.P
Environments contain two major components: a set of cookbook version constraints and environment attributes\.
.
.SH "SYNTAX"
A cookbook version constraint is comprised of a \fIcookbook name\fR and a \fIversion constraint\fR\. The \fIcookbook name\fR is the name of a cookbook in your system, and the \fIversion constraint\fR is a String describing the version(s) of that cookbook allowed in the environment\. Only one \fIversion constraint\fR is supported for a given \fIcookbook name\fR\.
.
.P
The exact syntax used to define a cookbook version constraint varies depending on whether you use the JSON format or the Ruby format\. In the JSON format, the cookbook version constraints for an environment are represented as a single JSON object, like this:
.
.IP "" 4
.
.nf

{"apache2": ">= 1\.5\.0"}
.
.fi
.
.IP "" 0
.
.P
In the Ruby format, the cookbook version contraints for an environment are represented as a Ruby Hash, like this:
.
.IP "" 4
.
.nf

{"apache2" => ">= 1\.5\.0"}
.
.fi
.
.IP "" 0
.
.P
A \fIversion number\fR is a String comprised of two or three digits separated by a dot (\.) character, or in other words, strings of the form "major\.minor" or "major\.minor\.patch"\. "1\.2" and "1\.2\.3" are examples of valid version numbers\. Version numbers containing more than three digits or alphabetic characters are not supported\.
.
.P
A \fIversion constraint\fR String is composed of an \fIoperator\fR and a \fIversion number\fR\. The following operators are available:
.
.TP
\fB= VERSION\fR
Equality\. Only the exact version specified may be used\.
.
.TP
\fB> VERSION\fR
Greater than\. Only versions greater than \fBVERSION\fR may be used\.
.
.TP
\fB>= VERSION\fR
Greater than or equal to\. Only versions equal to VERSION or greater may be used\.
.
.TP
\fB< VERSION\fR
Less than\. Only versions less than VERSION may be used\.
.
.TP
\fB<= VERSION\fR
Less than or equal to\. Only versions lesser or equal to VERSION may be used\.
.
.TP
\fB~> VERSION\fR
Pessimistic greater than\. Depending on the number of components in the given VERSION, the constraint will be optimistic about future minor or patch revisions only\. For example, \fB~> 1\.1\fR will match any version less than \fB2\.0\fR and greater than or equal to \fB1\.1\.0\fR, whereas \fB~> 2\.0\.5\fR will match any version less than \fB2\.1\.0\fR and greater than or equal to \fB2\.0\.5\fR\.
.
.SH "FORMAT"
The JSON format of an envioronment is as follows:
.
.IP "" 4
.
.nf

{
  "name": "dev",
  "description": "The development environment",
  "cookbook_versions": {
    "couchdb": "= 11\.0\.0"
  },
  "json_class": "Chef::Environment",
  "chef_type": "environment",
  "default_attributes": {
    "apache2": { "listen_ports": [ "80", "443" ] }
  },
  "override_attributes": {
    "aws_s3_bucket": "production"
  }
}
.
.fi
.
.IP "" 0
.
.P
The Ruby format of an environment is as follows:
.
.IP "" 4
.
.nf

name "dev"
description "The development environment"
cookbook_versions  "couchdb" => "= 11\.0\.0"
default_attributes "apache2" => { "listen_ports" => [ "80", "443" ] }
override_attributes "aws_s3_bucket" => "production"
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
\fBknife\-node(1)\fR \fBknife\-cookbook(1)\fR \fBknife\-role(1)\fR \fIhttp://wiki\.opscode\.com/display/chef/Environments\fR \fIhttp://wiki\.opscode\.com/display/chef/Version+Constraints\fR
.
.SH "AUTHOR"
Chef was written by Adam Jacob \fIadam@opscode\.com\fR with many contributions from the community\.
.
.SH "DOCUMENTATION"
This manual page was written by Daniel DeLeo \fIdan@opscode\.com\fR\. Permission is granted to copy, distribute and / or modify this document under the terms of the Apache 2\.0 License\.
.
.SH "CHEF"
Knife is distributed with Chef\. \fIhttp://wiki\.opscode\.com/display/chef/Home\fR
