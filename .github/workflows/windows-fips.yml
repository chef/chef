---
name: windows-fips
permissions:
  contents: read

"on":
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: windows-fips-${{ github.ref }}
  cancel-in-progress: true

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, windows-2025]
        ruby: ['3.4']
    runs-on: ${{ matrix.os }}
    env:
      HAB_ORIGIN: gha # Set the dummy origin for this Github actions CI flow
      HAB_BLDR_CHANNEL: base-2025
      HAB_REFRESH_CHANNEL: base-2025
      HAB_AUTH_TOKEN: ${{ secrets.HAB_AUTH_TOKEN }}
    steps:
    - uses: actions/checkout@v4
    - name: 'Install Habitat CLI'
      run: |
        # Download and install Habitat CLI
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/habitat-sh/habitat/main/components/hab/install.ps1 -OutFile install-habitat.ps1
        .\install-habitat.ps1
        # Add hab to PATH
        $env:PATH = "C:\Program Files\Habitat;" + $env:PATH
        # Use GitHub's special environment file to persist the PATH across steps
        echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        # Accept the license
        hab license accept
        hab --version

    - name: 'Generate Habitat Origin Key'
      run: |
        # Generate the origin key for signing packages
        hab origin key generate "$env:HAB_ORIGIN"

    - name: 'Build Habitat Package'
      run: |
        # Build the package for current checkout
        hab pkg build .
        # Find the built package using relative paths
        $pkg_path = Get-ChildItem -Path "results" -Filter "$env:HAB_ORIGIN-chef-infra-client-*.hart" |
                    Sort-Object LastWriteTime -Descending |
                    Select-Object -First 1

        if ($pkg_path) {
            Write-Host "✓ Built package: $($pkg_path.Name)"
            Copy-Item $pkg_path.FullName -Destination "chef-infra-client-latest.hart"
            Write-Host "✓ Copied to chef-infra-client-latest.hart"
        } else {
            Write-Error "× No package built"
            Get-ChildItem -Path "results" -ErrorAction SilentlyContinue
            Exit 1
        }

    - name: 'Install Chef Infra Client Package'
      run: |
        # Install the package
        hab pkg install chef-infra-client-latest.hart

        # Print the version of the installed package
        hab pkg exec $env:HAB_ORIGIN/chef-infra-client chef-client --version

    - name: 'Enable FIPS via Windows registry'
      run: |
        $KeyPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy"
        $ValueName = "Enabled"
        $ValueData = 1  # Use integer instead of string

        # Create the key if it doesn't exist
        if (!(Test-Path $KeyPath)) {
          New-Item -Path $KeyPath -Force | Out-Null
        }

        # Set the Enabled value to 1
        Set-ItemProperty -Path $KeyPath -Name $ValueName -Value $ValueData -Type DWord -Force

        # Verify FIPS is enabled
        $fipsEnabled = (Get-ItemProperty -Path $KeyPath).Enabled
        Write-Host "FIPS Mode Enabled: $fipsEnabled"

        # Extra verification
        if ($fipsEnabled -ne 1) {
          Write-Error "Failed to enable FIPS mode in Windows registry"
          Exit 1
        }

    - name: 'Run chef-client with FIPS'
      run: |
        # Verify FIPS mode is active
        hab pkg exec $env:HAB_ORIGIN/chef-infra-client chef-client --version

        #*** Uncomment the below lines to check for FIPS mode in chef-client logs once OpenSSL has FIPS mode enabled
        # $output = hab pkg exec $env:HAB_ORIGIN/chef-infra-client chef-client -l debug --no-color 2>&1 | Select-String "FIPS"
        # if ($output -match "OpenSSL FIPS 140 mode enabled") {
        #   Write-Host "✅ Chef Infra Client is running in FIPS mode"
        # } else {
        #   Write-Host "❌ FIPS mode not detected"
        #   Exit 1
        # }
