name: kitchen-fips

"on":
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: kitchen-fips-${{ github.ref }}
  cancel-in-progress: true

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, windows-2025]
        ruby: ['3.4']
    env:
      HAB_ORIGIN: chef
      HAB_BLDR_CHANNEL: base-2025 # Explicitly set the builder channel
      HAB_REFRESH_CHANNEL: base-2025 # Explicitly set the refresh channel
      CHEF_LICENSE: accept-no-persist
      HAB_LICENSE: accept-no-persist
      HAB_AUTH_TOKEN: ${{ secrets.HAB_AUTH_TOKEN }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: 'Testing out Chocolatey'
      id: test_choco
      run: |
        # Chocolatey profile
        $ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        if (Test-Path($ChocolateyProfile)) {
            Import-Module "$ChocolateyProfile"
        }
        If ($lastexitcode -ne 0) { Exit $lastexitcode }
    - name: 'Install and Setup Habitat'
      id: install_habitat
      run: |
        Write-Output "*** Checking for Habitat installation and installing it if not present***"
        choco install -y habitat
        if ($lastexitcode -ne 0) { throw "unable to build or install Habitat: required minimum version of Habitat not installed" }
        refreshenv

        # Verify hab is installed
        hab --version

    - name: 'Am I in the correct folder to build Habitat from?'
      id: check_folder
      run: |
        $currentDir = Get-Location
        Write-Output "Current Directory: $currentDir"
        if (-not (Test-Path -Path ".\habitat")) {
            throw "habitat directory not found in the current working directory. Please ensure you are in the correct directory."
        } else {
            Write-Output "habitat directory found. Proceeding with the build."
        }

    - name: 'Build and Install Chef-19 from Habitat'
      id: install_chef
      run: |
        Write-Host "Generating origin key"
        hab origin key generate $env:HAB_ORIGIN

        # Build the Chef-19 package from the habitat directory
        hab pkg build habitat

        # Install the built package
        $pkg_path = Get-ChildItem -Path "results" -Filter "chef-chef-infra-client-*.hart" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        hab pkg install $pkg_path.FullName

        # Set up environment path
        $chef_pkg = hab pkg path chef/chef-infra-client
        $env:PATH = "$chef_pkg\bin;$chef_pkg\embedded\bin;" + $env:PATH

        # Verify installation
        chef-client -v
        rake --version
        bundle -v

    - name: 'Setup Chef Environment'
      id: setup_chef
      run: |
        bundle clean --force
        bundle install
        $chef_pkg = hab pkg path chef/chef-infra-client
        $env:PATH = "$chef_pkg\bin;$chef_pkg\embedded\bin;" + $env:PATH

        Write-Output "Installed Chef:"
        chef-client -v
        If ($lastexitcode -ne 0) { Exit $lastexitcode }
    - name: 'Enable FIPS via windows registry' #FIPS needs to be enabled after installation of Chef, otherwise it fails due to Cryptography error
      run: |
        $OldErrorActionPreference = $ErrorActionPreference
        $ErrorActionPreference = "stop"
        $KeyPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy"
        $ValueName = "Enabled"
        $ValueData = "1"
        try{
            Get-ItemProperty -Path $KeyPath -Name $valueName -ErrorAction Stop
            New-ItemProperty -Path $KeyPath -Name $ValueName -Value $ValueData -PropertyType DWord -Force
        }
        catch [System.Management.Automation.PSArgumentException] {
            New-ItemProperty -Path $KeyPath -Name $ValueName -Value $ValueData -PropertyType DWord -Force
        }
        catch [System.Management.Automation.ItemNotFoundException]
        {
            New-Item -Path $KeyPath -Force
            New-ItemProperty -Path $KeyPath -Name $ValueName -Value $ValueData -PropertyType DWord -Force
        }
        Finally
        {
            $ErrorActionPreference = $OldErrorActionPreference
        }
        if (-not $?) { throw "Failed to enable FIPS mode." }
    - name: 'Run chef-client'
      run: |
        $chef_pkg = hab pkg path chef/chef-infra-client
        $env:PATH = "$chef_pkg\bin;$chef_pkg\embedded\bin;" + $env:PATH

        # Verify Chef-19 installation
        Write-Output "Verifying Chef-19 installation:"
        chef-client -v
        If ($lastexitcode -ne 0) { Exit $lastexitcode }

        # Verify FIPS mode is enabled through PowerShell
        Write-Output "Verifying FIPS mode is enabled through PowerShell:"
        $fipsEnabled = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy" -Name "Enabled" | Select-Object -ExpandProperty Enabled
        if ($fipsEnabled -eq 1) {
            Write-Output "FIPS mode is confirmed enabled in Windows Registry"
        } else {
            Write-Output "FIPS mode is NOT enabled in Windows Registry"
            Exit 1
        }

        # Verify FIPS mode is working with OpenSSL
        Write-Output "Verifying FIPS mode is working with OpenSSL:"
        $openssl_path = Join-Path -Path $chef_pkg -ChildPath "embedded\bin\openssl.exe"

        # Test if OpenSSL is built with FIPS support
        & $openssl_path version
        Write-Output "Testing OpenSSL FIPS mode:"

        # Run OpenSSL in FIPS mode and check if it works
        $result = & $openssl_path list -providers
        if ($result -match "fips") {
            Write-Output "OpenSSL FIPS provider is available"
        } else {
            Write-Output "OpenSSL FIPS provider check:"
            & $openssl_path list -providers

            # Alternative test: try to use a non-FIPS algorithm which should fail in FIPS mode
            Write-Output "Testing FIPS compliance by attempting to use MD5 (should fail in FIPS mode):"
            & $openssl_path dgst -md5 $openssl_path 2>&1
            if ($lastexitcode -ne 0) {
                Write-Output "FIPS mode verification successful: MD5 algorithm was rejected as expected"
            } else {
                Write-Output "WARNING: MD5 was allowed which may indicate FIPS mode is not active"
                # We don't exit here as the OpenSSL behavior might vary
            }
        }

        # Final verification using Chef itself with Ruby one-liner
        Write-Output "Verifying FIPS mode through Chef Ruby environment:"
        $chef_fips_check = chef-client -e "require 'openssl'; puts 'FIPS Mode: ' + OpenSSL.fips_mode.to_s"
        if ($chef_fips_check -match "FIPS Mode: true") {
            Write-Output "Chef confirms FIPS mode is enabled"
        } else {
            Write-Output "Chef FIPS check output:"
            Write-Output $chef_fips_check
            Write-Output "WARNING: Chef does not report FIPS mode as enabled"
            # This is a serious issue if Chef doesn't recognize FIPS mode
            Exit 1
        }
