#!/bin/bash

set -eu

# Only execute in the verify pipeline
[[ "$BUILDKITE_PIPELINE_NAME" =~ (verify|validate/(release|adhoc|canary))$ ]] || exit 0

docker ps || true

# Get chef foundation version from the json file
CHEF_FOUNDATION_VERSION=$(cat .buildkite-platform.json | jq -r '.chef_foundation')
export CHEF_FOUNDATION_VERSION
echo "Chef Foundation Version: $CHEF_FOUNDATION_VERSION"

OMNIBUS_TOOLCHAIN_VERSION=$(cat .buildkite-platform.json | jq -r '.omnibus_toolchain')
export OMNIBUS_TOOLCHAIN_VERSION
echo "Omnibus Toolchain Version: $OMNIBUS_TOOLCHAIN_VERSION"

if [[ "$BUILDKITE_STEP_KEY" == "build-windows-2019" ]] && [[ "$BUILDKITE_ORGANIZATION_SLUG" =~ chef(-canary)?$ ]]
then
  TOKEN=$(curl -sX PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
  ROLE=$(curl -sH "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/iam/security-credentials/)
  RESPONSE=$(curl -sH "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE)
  AWS_ACCESS_KEY_ID=$(echo $RESPONSE | jq -r '.AccessKeyId')
  export AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY=$(echo $RESPONSE | jq -r '.SecretAccessKey')
  export AWS_SECRET_ACCESS_KEY
  AWS_SESSION_TOKEN=$(echo $RESPONSE | jq -r '.Token')
  export AWS_SESSION_TOKEN
fi

# We've now seen cases where origin/main on the build hosts can get
# out of date. This causes us to build components unnecessarily.
# Fetching it here hopefully will prevent this situation.
echo "Fetching origin/main"
git fetch origin main

# DEBUGGING FOR RELENG
# Fetch the git tags to see if that addresses the weird smart build behavior for Habitat
git fetch --tags --force

# Rebase onto current main to ensure this PR is closer to what happens when it's merged.
# Only do this if it's actually a branch (i.e. a PR or a manually created build), not a
# post-merge CI run of main.
if [[ "$BUILDKITE_BRANCH" != "main" ]]; then
  git config user.email "you@example.com" # these are needed for the rebase attempt
  git config user.name "Your Name"
  main=$(git show-ref -s --abbrev origin/main)
  pr_head=$(git show-ref -s --abbrev HEAD)
  github="https://github.com/chef/chef/commit/"
  if git rebase origin/main >/dev/null; then
    buildkite-agent annotate --style success --context "rebase-pr-branch-${main}" \
      "Rebased onto main ([${main}](${github}${main}))."
  else
    git rebase --abort
    buildkite-agent annotate --style warning --context "rebase-pr-branch-${main}" \
      "Couldn't rebase onto main ([${main}](${github}${main})), building PR HEAD ([${pr_head}](${github}${pr_head}))."
  fi
fi

# Only if on chef-canary or chef org
if [[ ! "$BUILDKITE_STEP_KEY" =~ ^test.* ]] && [[ $BUILDKITE_ORGANIZATION_SLUG != "chef-oss" ]]; then

  export VAULT_ADDR="https://vault.ps.chef.co"
  export VAULT_TOKEN=$(vault login -method=aws -path=aws/private-cd -token-only header_value=vault.ps.chef.co role=ci)

  if [[ ! $BUILDKITE_LABEL =~ macOS|mac_os_x ]]; then
    lita_password=$(aws ssm get-parameter --name "artifactory-lita-password" --with-decryption --query Parameter.Value --output text)
    export ARTIFACTORY_API_KEY=$(echo -n "lita:${lita_password}" | base64)
  fi
  export ARTIFACTORY_PASSWORD=$(vault kv get -field password account/static/artifactory/buildkite)

  # Only if on RPM-based Linux distros
  echo "<<<<<<DEBUG - OMNIBUS_RPM_SIGNING_PASSPHRASE #{ENV["OMNIBUS_RPM_SIGNING_PASSPHRASE"]"
  if [[ "$BUILDKITE_LABEL" =~ rhel|rocky|sles|centos|amazon ]]; then
    export RPM_SIGNING_KEY="-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAtDWl9Kg6fa2C98DgEw0/88+kCCP3ke6qA2GHsDI5lbktoRA3
u3ZaVyx2TgApdzC2MTp55bJXcZywRdD4DwJlMX6RBx0X3YL6vASmvTe+880q6iOf
d38iApRvhe6uyFUl4WbJWzqTK/AlRuSAFMVMr5GGajhY/xq6TdwPpHtQehbqrvCR
Vj57g7G9vo7eMuJ+kZ9jNShbn/Qy7i3CrIHBcnSxtg7TvJgWu5cEs02s49a511Z0
hjs7a75z2pkscODd+ffNvDBHQ0rPJiw3UvscpyN+/+riF2bM1QVXJwP9Bjk4aOuY
nuo+GnSsnzd35eS/iATKLAT09gubRXpnU2pMawIDAQABAoIBAEOt5k7VI2px0L8F
Y+Ij1sHVWLBp+Z+H97ffWBtXMYNGkZlswtGXqGQW4bN3ohsOY05nvMIEUYzsoNMH
oTHZ33FQLF10krLxbwNP5+MmXYOoqRZYHJq/V2GKp7uwIVpBiEF33eVyQTV+MjHG
vUePtbY2PDoGQX5FZnS5UfKfEWFYOp8hEIcXL+WJTlcEO6L+RzqN2ASecAfLB9F6
nWPhJknE4N7jfg5Qop6b1uF3qx+b8REuhB6XWjLKx1sCtTxCtjN97jIZXr7Bs+1H
rPFbtFdoRGbIPFVfPh/nppYjxS14//4TV//krjfF0hgfV3adsEEMMvdjXfhk5p6U
wxigZIECgYEA2h3o05VLw1XEjeeQshw+VkpzI+oxFXfbrjnwa88EQc5MdgXvNcYs
u9C9U6BHMP308SM/TxQBVLAPiuxAQcJHlOjt7paDjCkHCCOdzvKswTz7MCrKBfuf
//fgw/WxdXHxlrH4O4X9X2NH8F93V97X/JbhpYp0/TPPfI7pPRqdAEECgYEA04JG
Q+d/SgkdgDcnlQ2VNXKLVnN5HQyoQ6vyDDuadAjY+zGaFD6tqYk7bMSImtaM2kz6
qkloYAyKeT9JjUgDoYO9UCdf5naMWTeVsk5jiWLO2dIYVGvJF/0g2KccLliwypxS
EGXavWgjGFHABoEABYgtDhtYJFGygQy28drS4asCgYArEc7gwNFGEBCQ6NHkqbkR
dwAHbn4kvBcv7xbvYuB3UhI9F+zlVG2O5KgN9E86eFs+pnQg3FVq8J0RFJeXpJJX
8CrTevsc2RkfXVETBU5hlfYPy9M6nTY56CuE5mYVR9upoxjeQBYJGOSirWc2fbVu
liiWdKGnQezNrraVr0SjQQKBgQDFfvCzeVdPP2GvllC8illX9eQLznk52dbIkabL
K2CWlqhdLbzMyJYKJ104u+8+fbY6JQUuuqrefPdULfc1GBhj2YqNbKbMoMd+izuZ
qj6hS4UQuXAEbDzyzGa+RpQ25pP2LK8oJqNwluumSrd+mzf08mn3sSrFhw+iFshA
325oTwKBgEab8AdPeFUE2jDelnDhtyXvHRZX+qBqG47RF/HC1Md4JA3Yp9w814tk
pWxl1cCCx4uSfTM/eGInIRrGWK9l3xWx9WimlRCLkHuFC7mODLRW4RWtpqIliMZA
VW4CP8usNEkk962zR6SbPUpbXORLz9ZP2MkNpfyab9RZv6idnVAd
-----END RSA PRIVATE KEY-----"
    echo "<<<<<<DEBUG RPM SIGNING KEY - pre-command-hooks for Linux based ports >>>>>>> RPM_SIGNING_KEY  : $RPM_SIGNING_KEY "
  fi
fi
