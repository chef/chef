bash -c '
<%= "export http_proxy=\"#{knife_config[:bootstrap_proxy]}\"" if knife_config[:bootstrap_proxy] -%>

if [ ! -f /usr/bin/chef-client ]; then
  pacman -Syy
  pacman -S --noconfirm ruby ntp base-devel
  ntpdate -u pool.ntp.org
  gem install ohai --no-rdoc --no-ri --verbose
  gem install chef --no-rdoc --no-ri --verbose <%= bootstrap_version_string %>
fi

mkdir -p /etc/chef

awk NF > /etc/chef/validation.pem <<'EOP'
<%= validation_key %>
EOP
chmod 0600 /etc/chef/validation.pem

<% if encrypted_data_bag_secret -%>
awk NF > /etc/chef/encrypted_data_bag_secret <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
chmod 0600 /etc/chef/encrypted_data_bag_secret
<% end -%>

<%# Generate Ohai Hints -%>
<% unless @chef_config[:knife][:hints].nil? || @chef_config[:knife][:hints].empty? -%>
mkdir -p /etc/chef/ohai/hints

<% @chef_config[:knife][:hints].each do |name, hash| -%>
cat > /etc/chef/ohai/hints/<%= name %>.json <<'EOP'
<%= hash.to_json %>
EOP
<% end -%>
<% end -%>

cat > /etc/chef/client.rb <<'EOP'
log_level        :info
log_location     STDOUT
chef_server_url  "<%= @chef_config[:chef_server_url] %>"
validation_client_name "<%= @chef_config[:validation_client_name] %>"
<% if @config[:chef_node_name] -%>
node_name "<%= @config[:chef_node_name] %>"
<% else -%>
# Using default node name (fqdn)
<% end -%>
# ArchLinux follows the Filesystem Hierarchy Standard
file_cache_path    "/var/cache/chef"
file_backup_path   "/var/lib/chef/backup"
pid_file           "/var/run/chef/client.pid"
cache_options({ :path => "/var/cache/chef/checksums", :skip_expires => true})
<% if knife_config[:bootstrap_proxy] %>
http_proxy         "<%= knife_config[:bootstrap_proxy] %>"
https_proxy        "<%= knife_config[:bootstrap_proxy] %>"
<% end -%>
EOP

cat > /etc/chef/first-boot.json <<'EOP'
<%= first_boot.to_json %>
EOP

<%= start_chef %>'
