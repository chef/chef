.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "KNIFE\-NODE" "1" "January 2013" "Chef 11.0.0.alpha" "Chef Manual"
.
.SH "NAME"
\fBknife\-node\fR \- Manage the hosts in your infrastructure
.
.SH "SYNOPSIS"
\fBknife\fR \fBnode\fR \fIsub\-command\fR \fI(options)\fR
.
.SH "DESCRIPTION"
Nodes are data structures that represent hosts configured with Chef\. Nodes have a \fBname\fR, a String that uniquely identifies the node, \fBattributes\fR, a nested Hash of properties that describe how the host should be configured, a \fBchef_environment\fR, a String representing the environment to which the node belongs, and a \fBrun_list\fR, an ordered list of \fBrecipes\fR or \fBroles\fR that chef\-client should apply when configuring a host\.
.
.P
When a host communicates with a Chef Server, it authenticates using its \fBnode_name\fR for identification and signs its reqests with a private key\. The Server validates the request by looking up a \fBclient\fR object with a name identical to the \fBnode_name\fR submitted with the request and verifes the signature using the public key for that \fBclient\fR object\. \fBNOTE\fR that the \fBclient\fR is a different object in the system\. It is associated with a node by virtue of having a matching name\.
.
.P
By default \fBchef\-client\fR(8) will create a node using the FQDN of the host for the node name, though this may be overridden by configuration settings\.
.
.SH "NODE SUB\-COMMANDS"
The following \fBnode\fR subcommands are available:
.
.SH "BULK DELETE"
\fBknife node bulk delete\fR \fIregex\fR \fI(options)\fR
.
.P
Deletes nodes for which the name matches the regular expression \fIregex\fR on the Chef Server\. The regular expression should be given in quotes, and should not be surrounded with forward slashes (as is typical of regular expression literals in scripting languages)\.
.
.SH "CREATE"
\fBknife node create\fR \fIname\fR \fI(options)\fR
.
.P
Create a new node\. Unless the \-\-disable\-editing option is given, an empty node object will be created and displayed in your text editor\. If the editor exits with a successful exit status, the node data will be posted to the Chef Server to create the node\.
.
.SH "DELETE"
\fBknife node delete\fR \fIname\fR \fI(options)\fR
.
.P
Deletes the node identified by \fIname\fR on the Chef Server\.
.
.SH "EDIT"
\fBknife node edit\fR \fIname\fR \fI(options)\fR
.
.TP
\fB\-a\fR, \fB\-\-all\fR
Display all node data in the editor\. By default, default, override, and automatic attributes are not shown\.
.
.P
Edit the node identified by \fIname\fR\. Like \fBknife node create\fR, the node will be displayed in your text editor unless the \-n option is present\.
.
.SH "FROM FILE"
\fBknife node from file\fR \fIfile\fR \fI(options)\fR
.
.P
Create a node from a JSON format \fIfile\fR\.
.
.SH "LIST"
\fBknife node list\fR \fI(options)\fR
.
.TP
\fB\-w\fR, \fB\-\-with\-uri\fR
Show corresponding URIs
.
.P
List all nodes\.
.
.SH "RUN_LIST ADD"
\fBknife node run_list add\fR \fIname\fR \fIrun list item\fR \fI(options)\fR
.
.TP
\fB\-a\fR, \fB\-\-after ITEM\fR
Place the ENTRY in the run list after ITEM
.
.P
Add the \fIrun list item\fR to the node\'s \fBrun_list\fR\. See Run list
.
.SH "RUN_LIST REMOVE"
\fBknife node run_list remove\fR \fInode name\fR \fIrun list item\fR \fI(options)\fR
.
.P
Remove the \fIrun list item\fR from the node\'s \fBrun_list\fR\.
.
.SH "SHOW"
\fBknife node show\fR \fInode name\fR \fI(options)\fR
.
.TP
\fB\-a\fR, \fB\-\-attribute [ATTR]\fR
Show only one attribute
.
.TP
\fB\-r\fR, \fB\-\-run\-list\fR
Show only the run list
.
.TP
\fB\-F\fR, \fB\-\-format FORMAT\fR
Display the node in a different format\.
.
.TP
\fB\-m\fR, \fB\-\-medium\fR
Display more, but not all, of the node\'s data when using the default \fIsummary\fR format
.
.P
Displays the node identified by \fInode name\fR on stdout\.
.
.SH "RUN LIST ITEM FORMAT"
Run list items may be either roles or recipes\. When adding a role to a run list, the correct syntax is "role[ROLE_NAME]"
.
.P
When adding a recipe to a run list, there are several valid formats:
.
.TP
Fully Qualified Format
"recipe[COOKBOOK::RECIPE_NAME]", for example, "recipe[chef::client]"
.
.TP
Cookbook Recipe Format
For brevity, the recipe part of the fully qualified format may be omitted, and recipes specified as "COOKBOOK::RECIPE_NAME", e\.g\., "chef::client"
.
.TP
Default Recipe Format
When adding the default recipe of a cookbook to a run list, the recipe name may be omitted as well, e\.g\., "chef::default" may be written as just "chef"
.
.SH "SEE ALSO"
\fBknife\-client\fR(1) \fBknife\-search\fR(1) \fBknife\-role\fR(1)
.
.SH "AUTHOR"
Chef was written by Adam Jacob \fIadam@opscode\.com\fR with many contributions from the community\.
.
.SH "DOCUMENTATION"
This manual page was written by Joshua Timberman \fIjoshua@opscode\.com\fR\. Permission is granted to copy, distribute and / or modify this document under the terms of the Apache 2\.0 License\.
.
.SH "CHEF"
Knife is distributed with Chef\. \fIhttp://wiki\.opscode\.com/display/chef/Home\fR
