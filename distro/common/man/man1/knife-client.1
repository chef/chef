.TH "KNIFE-CLIENT" "1" "Chef 11.8.0" "" "knife client"
.SH NAME
knife-client \- The man page for the knife client subcommand.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructuredText.
.
.sp
When a node runs the chef\-client for the first time, it generally does not yet have an API client identity, and so it cannot make authenticated requests to the server. This is where the validation client\-\-\-known as the chef\-validator\-\-\-comes in. When the chef\-client runs, it checks if it has a client key. If the client key does not exist, it then attempts to borrow the identity of the chef\-validator to register itself with the server. In order to register with the server, the private key for the chef\-validator needs to be copied to the host and placed in /etc/chef/validation.pem.
.sp
Once the chef\-client has registered itself with the server, it no longer uses the validation client for anything. It is recommended that you delete the private key for the chef\-validator from the host after the host has registered or use the \fBdelete_validation\fP recipe that can be found in the \fBchef\-client\fP cookbook (\fI\%https://github.com/opscode-cookbooks/chef-client\fP).
.sp
The \fBknife client\fP subcommand is used to manage an API client list and their associated RSA public key\-pairs. This allows authentication requests to be made to the server by any entity that uses the Chef Server API, such as the chef\-client and Knife.
.sp
This subcommand has the following syntax:
.sp
.nf
.ft C
$ knife client [ARGUMENT] (options)
.ft P
.fi
.SH COMMON OPTIONS
.sp
The following options can be run with all Knife sub\-commands and plug\-ins:
.INDENT 0.0
.TP
.B \fB\-c CONFIG\fP, \fB\-\-config CONFIG\fP
The configuration file to use.
.TP
.B \fB\-\-color\fP
Indicates that colored output will be used.
.TP
.B \fB\-d\fP, \fB\-\-disable\-editing\fP
Indicates that $EDITOR will not be opened; data will be accepted as\-is.
.TP
.B \fB\-\-defaults\fP
Indicates that Knife will use the default value, instead of asking a user to provide one.
.TP
.B \fB\-e EDITOR\fP, \fB\-\-editor EDITOR\fP
The $EDITOR that is used for all interactive commands.
.TP
.B \fB\-E ENVIRONMENT\fP, \fB\-\-environment ENVIRONMENT\fP
The name of the environment. When this option is added to a command, the command will run only against the named environment.
.TP
.B \fB\-f FILE_NAME\fP, \fB\-\-file FILE_NAME\fP
Indicates that the private key will be saved to a specified file name.
.TP
.B \fB\-F FORMAT\fP, \fB\-\-format FORMAT\fP
The output format: \fBsummary\fP (default), \fBtext\fP, \fBjson\fP, \fByaml\fP, and \fBpp\fP.
.TP
.B \fB\-h\fP, \fB\-\-help\fP
Shows help for the command.
.TP
.B \fB\-k KEY\fP, \fB\-\-key KEY\fP
The private key that Knife will use to sign requests made by the API client to the server.
.TP
.B \fB\-\-no\-color\fP
Indicates that color will not be used in the output.
.TP
.B \fB\-p PASSWORD\fP, \fB\-\-password PASSWORD\fP
The user password.
.TP
.B \fB\-\-print\-after\fP
Indicates that data will be shown after a destructive operation.
.TP
.B \fB\-s URL\fP, \fB\-\-server\-url URL\fP
The URL for the server.
.TP
.B \fB\-u USER\fP, \fB\-\-user USER\fP
The user name used by Knife to sign requests made by the API client to the server. Authentication will fail if the user name does not match the private key.
.TP
.B \fB\-v\fP, \fB\-\-version\fP
The version of the chef\-client.
.TP
.B \fB\-V\fP, \fB\-\-verbose\fP
Set for more verbose outputs. Use \fB\-VV\fP for maximum verbosity.
.TP
.B \fB\-y\fP, \fB\-\-yes\fP
Indicates that the response to all confirmation prompts will be "Yes" (and that Knife will not ask for confirmation).
.UNINDENT
.SH BULK DELETE
.sp
The \fBbulk delete\fP argument is used to delete any API client that matches a pattern defined by a regular expression. The regular expression must be within quotes and not be surrounded by forward slashes (/).
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife client bulk delete REGEX
.ft P
.fi
.sp
\fBOptions\fP
.sp
This command does not have any specific options.
.SH CREATE
.sp
The \fBcreate\fP argument is used to create a new API client. This process will generate an RSA key pair for the named API client. The public key will be stored on the server and the private key will be displayed on \fBSTDOUT\fP or written to a named file.
.INDENT 0.0
.IP \(bu 2
For the chef\-client, the private key should be copied to the system as /etc/chef/client.pem.
.IP \(bu 2
For Knife, the private key is typically copied to ~/.chef/client_name.pem and referenced in the knife.rb configuration file.
.UNINDENT
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife client create CLIENT_NAME (options)
.ft P
.fi
.sp
\fBOptions\fP
.sp
This argument has the following options:
.INDENT 0.0
.TP
.B \fB\-a\fP, \fB\-\-admin\fP
Indicates that a client will be created as an admin client. This is required when users of the open source server need to access the Chef Server API as an administrator. This option only works when used with the open source server and will have no effect when used with Hosted Chef or Private Chef.
.UNINDENT
.sp
\fBExamples\fP
.sp
To create a Chef Admin client with the name "exampleorg" and save its private key to a file, enter:
.sp
.nf
.ft C
$ knife client create exampleorg \-a \-f "/etc/chef/client.pem"
.ft P
.fi
.sp
When running the \fBcreate\fP argument on Hosted Chef or Private Chef, be sure to omit the \fB\-a\fP option:
.sp
.nf
.ft C
$ knife client create exampleorg \-f "/etc/chef/client.pem"
.ft P
.fi
.SH DELETE
.sp
The \fBdelete\fP argument is used to delete a registered API client.
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife client delete CLIENT_NAME
.ft P
.fi
.sp
\fBOptions\fP
.sp
This command does not have any specific options.
.sp
\fBExamples\fP
.sp
To delete a client with the name "client_foo", enter:
.sp
.nf
.ft C
$ knife client delete client_foo
.ft P
.fi
.sp
Type \fBY\fP to confirm a deletion.
.SH EDIT
.sp
The \fBedit\fP argument is used to edit the details of a registered API client. When this argument is run, Knife will open $EDITOR to enable editing of the \fBadmin\fP attribute. (None of the other attributes should be changed using this argument.) When finished, Knife will update the server with those changes.
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife client edit CLIENT_NAME
.ft P
.fi
.sp
\fBOptions\fP
.sp
This command does not have any specific options.
.sp
\fBExamples\fP
.sp
To edit a client with the name "exampleorg", enter:
.sp
.nf
.ft C
$ knife client edit exampleorg
.ft P
.fi
.SH LIST
.sp
The \fBlist\fP argument is used to view a list of registered API client.
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife client list (options)
.ft P
.fi
.sp
\fBOptions\fP
.sp
This argument has the following options:
.INDENT 0.0
.TP
.B \fB\-w\fP, \fB\-\-with\-uri\fP
Indicates that the corresponding URIs will be shown.
.UNINDENT
.sp
\fBExamples\fP
.sp
To verify the API client list for the server, enter:
.sp
.nf
.ft C
$ knife client list
.ft P
.fi
.sp
to return something similar to:
.sp
.nf
.ft C
exampleorg
i\-12345678
rs\-123456
.ft P
.fi
.sp
To verify that an API client can authenticate to the
server correctly, try getting a list of clients using \fB\-u\fP and \fB\-k\fP options to specify its name and private key:
.sp
.nf
.ft C
$ knife client list \-u ORGNAME \-k .chef/ORGNAME.pem
.ft P
.fi
.SH REREGISTER
.sp
The \fBreregister\fP argument is used to regenerate an RSA key pair for an API client. The public key will be stored on the server and the private key will be displayed on \fBSTDOUT\fP or written to a named file.
.IP Note
Running this argument will invalidate the previous RSA key pair, making it unusable during authentication to the server.
.RE
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife client reregister CLIENT_NAME (options)
.ft P
.fi
.sp
\fBOptions\fP
.sp
This argument has the following options:
.INDENT 0.0
.TP
.B \fB\-f FILE_NAME\fP, \fB\-\-file FILE_NAME\fP
Indicates that the private key will be saved to a specified file name.
.UNINDENT
.sp
\fBExamples\fP
.sp
To regenerate the RSA key pair for a client named "testclient" and save it to a file named "rsa_key", enter:
.sp
.nf
.ft C
$ knife client regenerate testclient \-f rsa_key
.ft P
.fi
.SH SHOW
.sp
The \fBshow\fP argument is used to show the details of an API client.
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife client show CLIENT_NAME (options)
.ft P
.fi
.sp
\fBOptions\fP
.sp
This argument has the following options:
.INDENT 0.0
.TP
.B \fB\-a ATTR\fP, \fB\-\-attribute ATTR\fP
The attribute (or attributes) to show.
.UNINDENT
.sp
\fBExamples\fP
.sp
To view a client named "testclient", enter:
.sp
.nf
.ft C
$ knife client show testclient
.ft P
.fi
.sp
to return something like:
.sp
.nf
.ft C
admin:       false
chef_type:   client
json_class:  Chef::ApiClient
name:        testclient
public_key:
.ft P
.fi
.sp
To view information in JSON format, use the \fB\-F\fP common option as part of the command like this:
.sp
.nf
.ft C
$ knife role show devops \-F json
.ft P
.fi
.sp
Other formats available include \fBtext\fP, \fByaml\fP, and \fBpp\fP.
.SH AUTHOR
Opscode
.\" Generated by docutils manpage writer.
.
