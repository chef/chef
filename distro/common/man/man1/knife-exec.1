.TH "KNIFE-EXEC" "1" "Chef 11.10.0" "" "knife exec"
.SH NAME
knife-exec \- The man page for the knife exec subcommand.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructuredText.
.
.sp
The \fBknife exec\fP subcommand uses the Knife configuration file to execute Ruby scripts in the context of a fully configured chef\-client. This subcommand is most often used to run scripts that will only access server one time (or otherwise very infrequently). Use this subcommand any time that an operation does not warrant full usage of the Knife subcommand library.
.sp
\fBAuthenticated API Requests\fP
.sp
The \fBknife exec\fP subcommand can be used to make authenticated API requests to the server using the following methods:
.TS
center;
|l|l|.
_
T{
Method
T}	T{
Description
T}
_
T{
\fBapi.delete\fP
T}	T{
Use to delete an object from the server.
T}
_
T{
\fBapi.get\fP
T}	T{
Use to get the details of an object on the server.
T}
_
T{
\fBapi.post\fP
T}	T{
Use to add an object to the server.
T}
_
T{
\fBapi.put\fP
T}	T{
Use to update an object on the server.
T}
_
.TE
.sp
These methods are used with the \fB\-E\fP option, which executes that string locally on the workstation using chef\-shell. These methods have the following syntax:
.sp
.nf
.ft C
$ knife exec \-E \(aqapi.method(/endpoint)\(aq
.ft P
.fi
.sp
where:
.INDENT 0.0
.IP \(bu 2
\fBapi.method\fP is the corresponding authentication method \-\-\- \fBapi.delete\fP, \fBapi.get\fP, \fBapi.post\fP, or \fBapi.put\fP
.IP \(bu 2
\fB/endpoint\fP is an endpoint in the Chef Server API
.UNINDENT
.sp
For example, to get the data for a node named "Example_Node":
.sp
.nf
.ft C
$ knife exec \-E \(aqputs api.get("/nodes/Example_Node")\(aq
.ft P
.fi
.sp
and to ensure that the output is visible in the console, add the \fBputs\fP in front of the API authorization request:
.sp
.nf
.ft C
$ knife exec \-E \(aqputs api.get("/nodes/Example_Node")\(aq
.ft P
.fi
.sp
where \fBputs\fP is the shorter version of the \fB$stdout.puts\fP predefined variable in Ruby.
.sp
The following example shows how to add a client named "IBM305RAMAC" and the \fB/clients\fP endpoint, and then return the private key for that user in the console:
.sp
.nf
.ft C
$ client_desc = {
    "name"  => "IBM305RAMAC",
    "admin" => false
  }

  new_client = api.post("/clients", client_desc)
  puts new_client["private_key"]
.ft P
.fi
.sp
\fBSyntax\fP
.sp
This argument has the following syntax:
.sp
.nf
.ft C
$ knife exec SCRIPT (options)
.ft P
.fi
.sp
\fBOptions\fP
.sp
This subcommand has the following options:
.INDENT 0.0
.TP
.B \fB\-c CONFIG_FILE\fP, \fB\-\-config CONFIG_FILE\fP
The configuration file to use.
.TP
.B \fB\-\-chef\-zero\-port PORT\fP
The port on which chef\-zero will listen.
.TP
.B \fB\-\-[no\-]color\fP
Indicates whether colored output will be used.
.TP
.B \fB\-d\fP, \fB\-\-disable\-editing\fP
Indicates that $EDITOR will not be opened; data will be accepted as\-is.
.TP
.B \fB\-\-defaults\fP
Indicates that Knife will use the default value, instead of asking a user to provide one.
.TP
.B \fB\-E CODE\fP, \fB\-\-exec CODE\fP
A string of code that will be executed.
.TP
.B \fB\-e EDITOR\fP, \fB\-\-editor EDITOR\fP
The $EDITOR that is used for all interactive commands.
.TP
.B \fB\-\-environment ENVIRONMENT\fP
The name of the environment. When this option is added to a command, the command will run only against the named environment.
.TP
.B \fB\-F FORMAT\fP, \fB\-\-format FORMAT\fP
The output format: \fBsummary\fP (default), \fBtext\fP, \fBjson\fP, \fByaml\fP, and \fBpp\fP.
.TP
.B \fB\-h\fP, \fB\-\-help\fP
Shows help for the command.
.TP
.B \fB\-k KEY\fP, \fB\-\-key KEY\fP
The private key that Knife will use to sign requests made by the API client to the server.
.TP
.B \fB\-p PATH:PATH\fP, \fB\-\-script\-path PATH:PATH\fP
A colon\-separated path at which Ruby scripts are located.
.TP
.B \fB\-\-print\-after\fP
Indicates that data will be shown after a destructive operation.
.TP
.B \fB\-s URL\fP, \fB\-\-server\-url URL\fP
The URL for the server.
.TP
.B \fB\-u USER\fP, \fB\-\-user USER\fP
The user name used by Knife to sign requests made by the API client to the server. Authentication will fail if the user name does not match the private key.
.TP
.B \fB\-v\fP, \fB\-\-version\fP
The version of the chef\-client.
.TP
.B \fB\-V\fP, \fB\-\-verbose\fP
Set for more verbose outputs. Use \fB\-VV\fP for maximum verbosity.
.TP
.B \fB\-y\fP, \fB\-\-yes\fP
Indicates that the response to all confirmation prompts will be "Yes" (and that Knife will not ask for confirmation).
.TP
.B \fB\-z\fP, \fB\-\-local\-mode\fP
Indicates that the chef\-client will be run in local mode, which allows all commands that work against the server to also work against the local chef\-repo.
.UNINDENT
.sp
\fBExamples\fP
.sp
There are three ways to use \fBknife exec\fP to run Ruby script files. For example:
.sp
.nf
.ft C
$ knife exec /path/to/script_file
.ft P
.fi
.sp
Or:
.sp
.nf
.ft C
$ knife exec \-E \(aqRUBY CODE\(aq
.ft P
.fi
.sp
Or:
.sp
.nf
.ft C
$ knife exec
RUBY CODE
^D
.ft P
.fi
.sp
To check the status of Knife using a Ruby script named "status.rb" (which looks like):
.sp
.nf
.ft C
printf "%\-5s %\-12s %\-8s %s\en", "Check In", "Name", "Ruby", "Recipes"
nodes.all do |n|
   checkin = Time.at(n[\(aqohai_time\(aq]).strftime("%F %R")
   rubyver = n[\(aqlanguages\(aq][\(aqruby\(aq][\(aqversion\(aq]
   recipes = n.run_list.expand(_default).recipes.join(", ")
   printf "%\-20s %\-12s %\-8s %s\en", checkin, n.name, rubyver, recipes
end
.ft P
.fi
.sp
and is located in a directory named "scripts", enter:
.sp
.nf
.ft C
$ knife exec scripts/status.rb
.ft P
.fi
.sp
To show the available free memory for all nodes, enter:
.sp
.nf
.ft C
$ knife exec \-E \(aqnodes.all {|n| puts "#{n.name} has #{n.memory.total} free memory"}\(aq
.ft P
.fi
.sp
To list all of the available search indexes, enter:
.sp
.nf
.ft C
$ knife exec \-E \(aqputs api.get("search").keys\(aq
.ft P
.fi
.sp
To query a node for multiple attributes using a Ruby script named \fBsearch_attributes.rb\fP (which looks like):
.sp
.nf
.ft C
% cat scripts/search_attributes.rb
query = ARGV[2]
attributes = ARGV[3].split(",")
puts "Your query: #{query}"
puts "Your attributes: #{attributes.join(" ")}"
results = {}
search(:node, query) do |n|
   results[n.name] = {}
   attributes.each {|a| results[n.name][a] = n[a]}
end

puts results
exit 0
.ft P
.fi
.sp
enter:
.sp
.nf
.ft C
% knife exec scripts/search_attributes.rb "hostname:test_system" ipaddress,fqdn
.ft P
.fi
.sp
to return something like:
.sp
.nf
.ft C
Your query: hostname:test_system
Your attributes: ipaddress fqdn
{"test_system.example.com"=>{"ipaddress"=>"10.1.1.200", "fqdn"=>"test_system.example.com"}}
.ft P
.fi
.SH AUTHOR
Chef
.\" Generated by docutils manpage writer.
.
